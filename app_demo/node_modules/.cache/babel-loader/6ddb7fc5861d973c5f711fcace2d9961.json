{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/masudimran/Downloads/client2/src/components/RightPanel/OthersQuestion/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { publicFetch } from '../../../util/fetcher';\nimport RichTextEditor from 'react-rte';\nimport { FetchContext } from '../../../store/fetch';\nimport { AuthContext } from '../../../store/auth';\nimport { useHistory } from \"react-router-dom\";\nimport Table from 'react-bootstrap/Table';\n\nconst UserQuestion = props => {\n  _s();\n\n  const [questions, setQuestions] = useState(null);\n  const [show, setShow] = useState(\"none\");\n  const [value, setValue] = useState(\"\");\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    authState\n  } = useContext(AuthContext);\n  const [questionId, setQuestionId] = useState(\"\");\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get('/question');\n      setQuestions(data);\n    };\n\n    if (questions === null) {\n      fetchQuestion();\n    }\n  });\n\n  const sendAnswer = async e => {\n    const textValue = {\n      \"text\": value\n    };\n    console.log(textValue.text);\n\n    try {\n      await authAxios.post(`/answer/${e.target.id}`, textValue);\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const changeDisplay = e => {\n    if (show === \"none\") {\n      setShow(\"inline\");\n      setQuestionId(e.target.id);\n    } else setShow(\"none\");\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      style: {\n        border: '1px solid black',\n        marginLeft: '20px',\n        width: \"90%\",\n        overflow: \"auto\",\n        fontFamily: 'Arial, Helvetica, sans-serif'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        scope: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            border: '1px solid black'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"20%\",\n              backgroundColor: 'lightgrey'\n            },\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              backgroundColor: 'lightgrey'\n            },\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (() => {\n          if (props.visible) {\n            return questions === null || questions === void 0 ? void 0 : questions.sort().map(({\n              id,\n              title,\n              created,\n              author\n            }) => author.id !== authState.userInfo.id ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {},\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: '1px solid black',\n                  minWidth: \"10px\"\n                },\n                children: created.slice(0, 10)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {},\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    padding: \"15px\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    id: id,\n                    onClick: changeDisplay,\n                    children: title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 31\n                  }, this), id === questionId ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: show\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 86,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      style: {\n                        width: \"400px\",\n                        height: \"100px\"\n                      },\n                      value: value,\n                      onChange: onChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 87,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      id: id,\n                      onClick: sendAnswer,\n                      children: \"Send Answer\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 52\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 27\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, this) : null);\n          } else {\n            return questions === null || questions === void 0 ? void 0 : questions.sort().slice(0, 5).map(({\n              id,\n              title,\n              created,\n              author\n            }) => author.id !== authState.userInfo.id ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                border: '1px solid black'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  textAlign: 'center',\n                  height: '40px',\n                  fontSize: '17px'\n                },\n                children: created.slice(0, 10)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  height: '40px',\n                  fontSize: '18px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: `/question/${id}`,\n                  children: title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 27\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }, this) : null);\n          }\n        })()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserQuestion, \"2c0aU31m27HjXJ++8qOCOBmeMFY=\");\n\n_c = UserQuestion;\nexport default UserQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserQuestion\");","map":{"version":3,"sources":["/Users/masudimran/Downloads/client2/src/components/RightPanel/OthersQuestion/index.js"],"names":["React","useState","useEffect","useContext","publicFetch","RichTextEditor","FetchContext","AuthContext","useHistory","Table","UserQuestion","props","questions","setQuestions","show","setShow","value","setValue","authAxios","authState","questionId","setQuestionId","fetchQuestion","data","get","sendAnswer","e","textValue","console","log","text","post","target","id","window","location","reload","error","changeDisplay","onChange","border","marginLeft","width","overflow","fontFamily","backgroundColor","visible","sort","map","title","created","author","userInfo","minWidth","slice","padding","display","height","textAlign","fontSize"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,MAAD,CAAhC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAgBf,UAAU,CAACG,YAAD,CAAhC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAgBhB,UAAU,CAACI,WAAD,CAAhC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,EAAD,CAA5C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,aAAa,GAAG,YAAY;AAChC,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMnB,WAAW,CAACoB,GAAZ,CAAgB,WAAhB,CAAvB;AACAX,MAAAA,YAAY,CAACU,IAAD,CAAZ;AAED,KAJD;;AAKA,QAAIX,SAAS,KAAK,IAAlB,EAAwB;AACtBU,MAAAA,aAAa;AACd;AACF,GATQ,CAAT;;AAWA,QAAMG,UAAU,GAAG,MAAOC,CAAP,IAAa;AAC9B,UAAMC,SAAS,GAAG;AAChB,cAAQX;AADQ,KAAlB;AAGAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACG,IAAtB;;AACA,QAAI;AACF,YAAMZ,SAAS,CAACa,IAAV,CAAgB,WAAUL,CAAC,CAACM,MAAF,CAASC,EAAG,EAAtC,EAAyCN,SAAzC,CAAN;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;AACF,GAXD;;AAaA,QAAMC,aAAa,GAAIZ,CAAD,IAAO;AAC3B,QAAIZ,IAAI,KAAK,MAAb,EAAqB;AACnBC,MAAAA,OAAO,CAAC,QAAD,CAAP;AACAM,MAAAA,aAAa,CAACK,CAAC,CAACM,MAAF,CAASC,EAAV,CAAb;AACD,KAHD,MAIKlB,OAAO,CAAC,MAAD,CAAP;AACN,GAND;;AAQA,QAAMwB,QAAQ,GAAIb,CAAD,IAAO;AACtBT,IAAAA,QAAQ,CAACS,CAAC,CAACM,MAAF,CAAShB,KAAV,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA,2BACC,QAAC,KAAD;AAAQ,MAAA,KAAK,EAAE;AAAEwB,QAAAA,MAAM,EAAC,iBAAT;AAA2BC,QAAAA,UAAU,EAAE,MAAvC;AAA+CC,QAAAA,KAAK,EAAE,KAAtD;AAA6DC,QAAAA,QAAQ,EAAE,MAAvE;AAAgFC,QAAAA,UAAU,EAAE;AAA5F,OAAf;AAAA,8BACG;AAAO,QAAA,KAAK,EAAC,KAAb;AAAA,+BACE;AAAI,UAAA,KAAK,EAAE;AAAEJ,YAAAA,MAAM,EAAC;AAAT,WAAX;AAAA,kCACE;AAAI,YAAA,KAAK,EAAE;AAAGE,cAAAA,KAAK,EAAE,KAAV;AAAkBG,cAAAA,eAAe,EAAC;AAAlC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,YAAA,KAAK,EAAE;AAACA,cAAAA,eAAe,EAAC;AAAjB,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADH,eAOG;AAAA,kBAEI,CAAC,MAAM;AACL,cAAIlC,KAAK,CAACmC,OAAV,EAAmB;AAClB,mBAAOlC,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CACXmC,IADE,GAEHC,GAFG,CAGF,CAAC;AACCf,cAAAA,EADD;AAECgB,cAAAA,KAFD;AAGCC,cAAAA,OAHD;AAICC,cAAAA;AAJD,aAAD,KAMEA,MAAM,CAAClB,EAAP,KAAcd,SAAS,CAACiC,QAAV,CAAmBnB,EAAjC,gBACE;AAAa,cAAA,KAAK,EAAE,EAApB;AAAA,sCACE;AAAI,gBAAA,KAAK,EAAE;AAAGO,kBAAAA,MAAM,EAAC,iBAAV;AAA4Ba,kBAAAA,QAAQ,EAAE;AAAtC,iBAAX;AAAA,0BAA4DH,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiB,EAAjB;AAA5D;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAI,gBAAA,KAAK,EAAE,EAAX;AAAA,uCACE;AAAK,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAE;AAAX,mBAAZ;AAAA,0CACE;AAAK,oBAAA,EAAE,EAAEtB,EAAT;AAAa,oBAAA,OAAO,EAAEK,aAAtB;AAAA,8BAAsCW;AAAtC;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGhB,EAAE,KAAKb,UAAP,gBAAoB;AAAK,oBAAA,KAAK,EAAE;AAAEoC,sBAAAA,OAAO,EAAE1C;AAAX,qBAAZ;AAAA,4CACnB;AAAA;AAAA;AAAA;AAAA,4BADmB,eAEnB;AAAO,sBAAA,KAAK,EAAE;AAAE4B,wBAAAA,KAAK,EAAE,OAAT;AAAkBe,wBAAAA,MAAM,EAAE;AAA1B,uBAAd;AAAmD,sBAAA,KAAK,EAAEzC,KAA1D;AACE,sBAAA,QAAQ,EAAEuB;AADZ;AAAA;AAAA;AAAA;AAAA,4BAFmB,eAInB;AAAA;AAAA;AAAA;AAAA,4BAJmB,eAKnB;AAAQ,sBAAA,EAAE,EAAEN,EAAZ;AAAgB,sBAAA,OAAO,EAAER,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BALmB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAApB,GAMQ,IARX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA,eAASQ,EAAT;AAAA;AAAA;AAAA;AAAA,oBADF,GAeU,IAxBV,CAAP;AA2BA,WA5BD,MA6BK;AACH,mBAAOrB,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CACZmC,IADG,GACIO,KADJ,CACU,CADV,EACa,CADb,EAEJN,GAFI,CAGH,CAAC;AACCf,cAAAA,EADD;AAECgB,cAAAA,KAFD;AAGCC,cAAAA,OAHD;AAICC,cAAAA;AAJD,aAAD,KAMEA,MAAM,CAAClB,EAAP,KAAcd,SAAS,CAACiC,QAAV,CAAmBnB,EAAjC,gBACE;AAAa,cAAA,KAAK,EAAE;AAAEO,gBAAAA,MAAM,EAAE;AAAV,eAApB;AAAA,sCACE;AAAI,gBAAA,KAAK,EAAE;AAAEkB,kBAAAA,SAAS,EAAC,QAAZ;AAAqBD,kBAAAA,MAAM,EAAC,MAA5B;AAAoCE,kBAAAA,QAAQ,EAAC;AAA7C,iBAAX;AAAA,0BAAmET,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiB,EAAjB;AAAnE;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAI,gBAAA,KAAK,EAAE;AAAGG,kBAAAA,MAAM,EAAC,MAAV;AAAkBE,kBAAAA,QAAQ,EAAC;AAA3B,iBAAX;AAAA,uCACE;AAAG,kBAAA,IAAI,EAAG,aAAY1B,EAAG,EAAzB;AAAA,4BAA6BgB;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA,eAAShB,EAAT;AAAA;AAAA;AAAA;AAAA,oBADF,GAMU,IAfT,CAAP;AAkBD;AAEF,SAnDD;AAFJ;AAAA;AAAA;AAAA;AAAA,cAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADF;AAkGD,CAhJD;;GAAMvB,Y;;KAAAA,Y;AAkJN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\n\nimport { publicFetch } from '../../../util/fetcher'\nimport RichTextEditor from 'react-rte';\nimport { FetchContext } from '../../../store/fetch'\nimport { AuthContext } from '../../../store/auth'\nimport { useHistory } from \"react-router-dom\";\nimport Table from 'react-bootstrap/Table'\n\n\nconst UserQuestion = (props) => {\n  const [questions, setQuestions] = useState(null)\n  const [show, setShow] = useState(\"none\");\n  const [value, setValue] = useState(\"\")\n  const { authAxios } = useContext(FetchContext)\n  const { authState } = useContext(AuthContext)\n  const [questionId, setQuestionId] = useState(\"\")\n\n\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get('/question')\n      setQuestions(data)\n\n    }\n    if (questions === null) {\n      fetchQuestion()\n    }\n  })\n\n  const sendAnswer = async (e) => {\n    const textValue = {\n      \"text\": value\n    }\n    console.log(textValue.text)\n    try {\n      await authAxios.post(`/answer/${e.target.id}`, textValue)\n      window.location.reload();\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const changeDisplay = (e) => {\n    if (show === \"none\") {\n      setShow(\"inline\")\n      setQuestionId(e.target.id)\n    }\n    else setShow(\"none\")\n  }\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  return (\n    <div>\n     <Table  style={{ border:'1px solid black',marginLeft: '20px', width: \"90%\", overflow: \"auto\",  fontFamily: 'Arial, Helvetica, sans-serif' }}>\n        <thead scope=\"col\">\n          <tr style={{ border:'1px solid black' }}>\n            <th style={{  width: \"20%\" , backgroundColor:'lightgrey'}}>Date</th>\n            <th style={{backgroundColor:'lightgrey'  }}>Question</th>\n          </tr>\n        </thead>\n        <tbody >\n          {\n            (() => {\n              if (props.visible) {\n               return questions\n                  ?.sort()\n                  .map(\n                    ({\n                      id,\n                      title,\n                      created,\n                      author\n                    }) => (\n                      author.id !== authState.userInfo.id ?\n                        <tr key={id} style={{ }}>\n                          <td style={{  border:'1px solid black',minWidth: \"10px\" }}>{created.slice(0, 10)}</td>\n                          <td style={{}}>\n                            <div style={{ padding: \"15px\" }}>\n                              <div id={id} onClick={changeDisplay}>{title}</div>\n                              {id === questionId ? <div style={{ display: show }}>\n                                <br />\n                                <input style={{ width: \"400px\", height: \"100px\" }} value={value}\n                                  onChange={onChange} />\n                                <br />\n                                <button id={id} onClick={sendAnswer}>Send Answer</button>\n                              </div> : null}\n                            </div>\n                          </td>\n                        </tr> : null\n                    )\n                  )\n              }\n              else {\n                return questions\n                  ?.sort().slice(0, 5)\n                  .map(\n                    ({\n                      id,\n                      title,\n                      created,\n                      author\n                    }) => (\n                      author.id !== authState.userInfo.id ?\n                        <tr key={id} style={{ border :'1px solid black'}}>\n                          <td style={{ textAlign:'center',height:'40px', fontSize:'17px' }}>{created.slice(0, 10)}</td>\n                          <td style={{  height:'40px', fontSize:'18px'  }}>\n                            <a href={`/question/${id}`}>{title}</a>\n                          </td>\n                        </tr> : null\n                    )\n                  )\n              }\n\n            })()\n          }\n\n\n          {/* {questions\n            ?.sort()\n            .map(\n              ({\n                id,\n                title,\n                created,\n                author\n              }) => (\n                author.id !== authState.userInfo.id ?\n                  <tr key={id} style={{ border: \"1px solid black\" }}>\n                    <td style={{ border: \"1px solid black\" }}>{created.slice(0, 10)}</td>\n                    <td style={{ border: \"1px solid black\" }}>\n                      {props.visible ? <div style={{ padding: \"15px\" }}>\n                        <div id={id} onClick={changeDisplay}>{title}</div>\n                        {id === questionId ? <div style={{ display: show }}>\n                          <br />\n                          <input style={{ width: \"400px\", height: \"100px\" }} value={value}\n                            onChange={onChange} />\n                          <br />\n                          <button id={id} onClick={sendAnswer}>Send Answer</button>\n                        </div> : null}\n                      </div> :\n                        <a href={`/question/${id}`}>{title}</a>}\n                    </td>\n                  </tr> : null\n              )\n            )} */}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default UserQuestion\n\n"]},"metadata":{},"sourceType":"module"}