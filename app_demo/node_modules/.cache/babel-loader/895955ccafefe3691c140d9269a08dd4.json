{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arnob/perosnal/projects/stackoverflow-clone/client2/src/components/RightPanel/OthersQuestion/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { publicFetch } from '../../../util/fetcher';\nimport RichTextEditor from 'react-rte';\n\nconst UserQuestion = props => {\n  _s();\n\n  const [questions, setQuestions] = useState(null);\n  const [show, setShow] = useState(\"none\");\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get('/question');\n      setQuestions(data);\n    };\n\n    fetchQuestion();\n  });\n\n  const changeDisplay = () => {\n    setShow(\"inline\");\n  };\n\n  const onChange = value => {\n    setValue(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        border: \"1px solid black\",\n        width: \"70%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            border: \"1px solid black\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              border: \"1px solid black\"\n            },\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              border: \"1px solid black\"\n            },\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: questions === null || questions === void 0 ? void 0 : questions.sort().map(({\n          id,\n          title,\n          created\n        }) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            border: \"1px solid black\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              border: \"1px solid black\"\n            },\n            children: created.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              border: \"1px solid black\"\n            },\n            children: props.visible ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(RichTextEditor, {\n                  style: {\n                    maxWidth: \"400px\",\n                    height: \"200px\"\n                  },\n                  value: value,\n                  onChange: onChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 28\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"Send Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 38\n            }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `/question/${id}`,\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 19\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserQuestion, \"OPhsV8vAH2pqzn+3N4pytfXi4to=\");\n\n_c = UserQuestion;\nexport default UserQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserQuestion\");","map":{"version":3,"sources":["/home/arnob/perosnal/projects/stackoverflow-clone/client2/src/components/RightPanel/OthersQuestion/index.js"],"names":["React","useState","useEffect","publicFetch","RichTextEditor","UserQuestion","props","questions","setQuestions","show","setShow","value","setValue","createEmptyValue","fetchQuestion","data","get","changeDisplay","onChange","border","width","sort","map","id","title","created","slice","visible","maxWidth","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { publicFetch } from '../../../util/fetcher'\nimport RichTextEditor from 'react-rte';\n\nconst UserQuestion = (props) => {\n  const [questions, setQuestions] = useState(null)\n  const [show, setShow] = useState(\"none\");\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue())\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get('/question')\n      setQuestions(data)\n    }\n    fetchQuestion()\n  })\n\n  const changeDisplay = () => {\n    setShow(\"inline\")\n  }\n\n  const onChange = (value) => {\n    setValue(value)\n  }\n\n  return (\n    <div>\n      <table style={{ border: \"1px solid black\", width: \"70%\" }}>\n        <thead>\n          <tr style={{ border: \"1px solid black\" }}>\n            <th style={{ border: \"1px solid black\" }}>Date</th>\n            <th style={{ border: \"1px solid black\" }}>Question</th>\n          </tr>\n        </thead>\n        <tbody>\n          {questions\n            ?.sort()\n            .map(\n              ({\n                id,\n                title,\n                created\n              }) => (\n                <tr key={id} style={{ border: \"1px solid black\" }}>\n                  <td style={{ border: \"1px solid black\" }}>{created.slice(0, 10)}</td>\n                  <td style={{ border: \"1px solid black\" }}>\n                    {props.visible ? <div>\n                      <div>{title}</div>\n                      <div><RichTextEditor style={{ maxWidth: \"400px\", height: \"200px\" }} value={value}\n                        onChange={onChange} />\n                      </div>\n                      <button>Send Answer</button>\n                    </div> :\n                      <a href={`/question/${id}`}>{title}</a>}\n                  </td>\n                </tr>\n              )\n            )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default UserQuestion\n\n"]},"metadata":{},"sourceType":"module"}