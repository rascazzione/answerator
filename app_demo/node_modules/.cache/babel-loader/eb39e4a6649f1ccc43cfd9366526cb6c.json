{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n  _s();\n\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowSize;\n}\n\n_s(useWindowSize, \"BavKeL6E6tNTiGKbwq7Pn4eTing=\");\n\nexport default useWindowSize;","map":{"version":3,"sources":["/home/arnob/perosnal/projects/stackoverflow-clone/client2/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,QAAnC;;AAEA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEH,QAAQ,GAAGC,MAAM,CAACG,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGC,MAAM,CAACM,WAAV,GAAwBF;AAFnC,KAAP;AAID;;AAED,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACK,OAAD,CAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASU,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACP,OAAO,EAAR,CAAb;AACD;;AAEDD,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMT,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT;AAYA,SAAOF,UAAP;AACD;;GAzBQT,a;;AA2BT,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nfunction useWindowSize() {\n  const isClient = typeof window === 'object'\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    }\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize)\n\n  useEffect(() => {\n    if (!isClient) {\n      return false\n    }\n\n    function handleResize() {\n      setWindowSize(getSize())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n  return windowSize\n}\n\nexport default useWindowSize\n"]},"metadata":{},"sourceType":"module"}